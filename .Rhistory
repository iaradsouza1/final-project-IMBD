theme_set(theme_bw())
library(GGally)
library(ggfortify)
library(vip)
library(magrittr)
library(doParallel)
all_cores <- parallel::detectCores(logical = FALSE)
registerDoParallel(cores = all_cores)
if(!dir.exists("fig/")) {
dir.create("fig")
}
load("eg.rda")
load("eg2.rda")
View(eg)
unique(eg$organism)
eg %<>% filter(organism %in% c("yeast", mouse))
unique(eg$organism)
load("eg2.rda")
eg %<>% filter(organism %in% c("yeast", "mouse"))
unique(eg$organism)
save(eg, "eg.rda")
save(eg, file="eg.rda")
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
opts_chunk$set(echo = TRUE,  # exibe o codigo de todos os chunks
eval = TRUE,  # executa todos os chunks
cache = TRUE, # apenas chunks com mudancas serao refeitos
dev = "png",  # figuras em png, nao pdf
dpi = 300,     # resolucao da imagem
message = FALSE,
warning = FALSE
)
library(tidymodels)
theme_set(theme_bw())
library(GGally)
library(ggfortify)
library(vip)
library(magrittr)
library(doParallel)
library(ggpubr)
all_cores <- parallel::detectCores(logical = FALSE)
registerDoParallel(cores = all_cores)
if(!dir.exists("fig/")) {
dir.create("fig")
}
# Salvar todos os resultados
save(list = ls()[grep("yeast", ls())], file = "yeast_results.rda")
autoplot(prcomp(yeast %>% select(-lethal_nonlethal),
center = TRUE, scale. = TRUE),
data = yeast,
colour = "lethal_nonlethal", alpha = 0.5,
loadings = TRUE, loadings.label = TRUE) +
scale_colour_discrete("Essencialidade", labels = c("lethal" = "Essencial", "nonlethal" = "Não-essencial")) +
ggtitle("PCA - Levedura")
mouse %>%
select(-lethal_nonlethal) %>%
ggpairs() +
ggtitle("Pairplots - Camundongo")
# Avaliação dos modelos ----
#### RANDOM FOREST ####
# Ver desempenho -----
mouse_rf_fit_tune %>%
collect_metrics() %>%
mutate(min_n = factor(min_n)) %>%
ggplot(., aes(x = mtry, y = mean, colour = min_n, group = min_n)) +
geom_line() +
geom_point() +
facet_grid(~ .metric) +
scale_x_continuous(breaks = seq(1, 9, 2)) +
scale_colour_viridis_d() +
ggtitle("Camundongo - Random Forest")
ggsave("fig/cv_mouse_rf.png", height = 5, width = 7, dpi = 300)
# Selecionar melhor modelo ----
mouse_rf_best <- mouse_rf_fit_tune %>%
select_best("accuracy")
mouse_rf_final <-
mouse_rf_tune_wflow %>%
finalize_workflow(mouse_rf_best)
mouse_rf_final <- fit(mouse_rf_final, mouse_treino_t)
mouse_resultado_rf <-
mouse_teste_t %>%
bind_cols(predict(mouse_rf_final, mouse_teste_t) %>%
rename(predicao_rf = .pred_class))
metrics(mouse_resultado_rf,
truth = lethal_nonlethal,
estimate = predicao_rf,
options = "roc")
conf_mat(mouse_resultado_rf,
truth = lethal_nonlethal,
estimate = predicao_rf) %>%
autoplot(type = "heatmap") +
ggtitle("Camundongo - Random Forest")
ggsave("fig/cm_mouse_rf.png", height = 3, width = 3, dpi = 300)
# Importância das variáveis ----
mouse_rf_final %>%
pull_workflow_fit() %>%
vip(scale = TRUE) +
ggtitle("Camundongo - Random Forest")
ggsave("fig/rf_importance_mouse.png", height = 5, width = 7, dpi = 300)
#### SVM POLINOMIAL ####
# Ver desempenho ----
mouse_svm_poly_fit_tune %>%
collect_metrics() %>%
mutate(degree = factor(degree)) %>%
ggplot(., aes(x = cost, y = mean, colour = degree)) +
geom_line() +
geom_point() +
facet_grid(~ .metric) +
scale_x_continuous(trans = "log2") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
scale_colour_viridis_d() +
ggtitle("Camundongo - SVM polinomial")
ggsave("fig/cv_mouse_svm_poly.png", height = 5, width = 7, dpi = 300)
# Selecionar melhor modelo ----
mouse_svm_poly_best <- mouse_svm_poly_fit_tune %>%
select_best("accuracy")
mouse_svm_poly_final <-
mouse_svm_poly_tune_wflow %>%
finalize_workflow(mouse_svm_poly_best)
mouse_svm_poly_final <- fit(mouse_svm_poly_final, mouse_treino_t)
mouse_resultado_svm_poly <-
mouse_teste_t %>%
bind_cols(predict(mouse_svm_poly_final, mouse_teste_t) %>%
rename(predicao_rf = .pred_class))
metrics(mouse_resultado_svm_poly,
truth = lethal_nonlethal,
estimate = predicao_rf,
options = "roc")
conf_mat(mouse_resultado_svm_poly,
truth = lethal_nonlethal,
estimate = predicao_rf) %>%
autoplot(type = "heatmap") +
ggtitle("Camundongo - SVM polinomial")
ggsave("fig/cm_mouse_svm_poly.png", height = 3, width = 3, dpi = 300)
#### SVM RADIAL ####
# Ver desempenho ----
mouse_svm_rbf_fit_tune %>%
collect_metrics() %>%
mutate(rbf_sigma = factor(rbf_sigma)) %>%
ggplot(., aes(x = cost, y = mean, colour = rbf_sigma)) +
geom_line() +
geom_point() +
facet_grid(~ .metric) +
scale_x_continuous(trans = "log2") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
scale_colour_viridis_d() +
ggtitle("Camundongo - SVM radial")
ggsave("fig/cv_mouse_svm_rbf.png", height = 5, width = 7, dpi = 300)
# Selecionar melhor modelo ----
mouse_svm_rbf_best <- mouse_svm_rbf_fit_tune %>%
select_best("accuracy")
mouse_svm_rbf_final <-
mouse_svm_rbf_tune_wflow %>%
finalize_workflow(mouse_svm_rbf_best)
mouse_svm_rbf_final <- fit(mouse_svm_rbf_final, mouse_treino_t)
mouse_resultado_svm_rbf <-
mouse_teste_t %>%
bind_cols(predict(mouse_svm_rbf_final, mouse_teste_t) %>%
rename(predicao_rf = .pred_class))
metrics(mouse_resultado_svm_rbf,
truth = lethal_nonlethal,
estimate = predicao_rf,
options = "roc")
conf_mat(mouse_resultado_svm_rbf,
truth = lethal_nonlethal,
estimate = predicao_rf) %>%
autoplot(type = "heatmap") +
ggtitle("Camundongo - SVM radial")
ggsave("fig/cm_mouse_svm_rbf.png", height = 3, width = 3, dpi = 300)
# Salvar todos os resultados
save(list = ls()[grep("mouse", ls())], file = "mouse_results.rda")
# Avaliação dos modelos ----
#### RANDOM FOREST ####
# Ver desempenho ----
yeast_rf_fit_tune %>%
collect_metrics() %>%
mutate(min_n = factor(min_n)) %>%
ggplot(., aes(x = mtry, y = mean, colour = min_n, group = min_n)) +
geom_line() +
geom_point() +
facet_grid(~ .metric) +
scale_x_continuous(breaks = seq(1, 9, 2)) +
scale_colour_viridis_d() +
ggtitle("Levedura - Random Forest")
ggsave("fig/cv_yeast_rf.png", height = 5, width = 7, dpi = 300)
# Selecionar melhor modelo ----
yeast_rf_best <- yeast_rf_fit_tune %>%
select_best("accuracy")
yeast_rf_final <-
yeast_rf_tune_wflow %>%
finalize_workflow(yeast_rf_best)
yeast_rf_final <- fit(yeast_rf_final,
yeast_treino_t)
yeast_resultado_rf <-
yeast_teste_t %>%
bind_cols(predict(yeast_rf_final, yeast_teste_t) %>%
rename(predicao_rf = .pred_class))
metrics(yeast_resultado_rf,
truth = lethal_nonlethal,
estimate = predicao_rf,
options = "roc")
conf_mat(yeast_resultado_rf,
truth = lethal_nonlethal,
estimate = predicao_rf) %>%
autoplot(type = "heatmap") +
ggtitle("Levedura - Random Forest")
ggsave("fig/cm_yeast_rf.png", height = 3, width = 3, dpi = 300)
# Importância das variáveis ----
yeast_rf_final %>%
pull_workflow_fit() %>%
vip(scale = TRUE) +
ggtitle("Levedura - Random Forest")
ggsave("fig/rf_importance_yeast.png", height = 5, width = 7, dpi = 300)
#### SVM POLINOMIAL ####
# Ver desempenho ----
yeast_svm_poly_fit_tune %>%
collect_metrics() %>%
mutate(degree = factor(degree)) %>%
ggplot(., aes(x = cost, y = mean, colour = degree)) +
geom_line() +
geom_point() +
facet_grid(~ .metric) +
scale_x_continuous(trans = "log2") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
scale_colour_viridis_d() +
ggtitle("Levedura - SVM polinomial")
ggsave("fig/cv_yeast_svm_poly.png", height = 5, width = 7, dpi = 300)
# Selecionar melhor modelo ----
yeast_svm_poly_best <- yeast_svm_poly_fit_tune %>%
select_best("accuracy")
yeast_svm_poly_final <-
yeast_svm_poly_tune_wflow %>%
finalize_workflow(yeast_svm_poly_best)
yeast_svm_poly_final <- fit(yeast_svm_poly_final, yeast_treino_t)
yeast_resultado_svm_poly <-
yeast_teste_t %>%
bind_cols(predict(yeast_svm_poly_final, yeast_teste_t) %>%
rename(predicao_rf = .pred_class))
metrics(yeast_resultado_svm_poly,
truth = lethal_nonlethal,
estimate = predicao_rf,
options = "roc")
conf_mat(yeast_resultado_svm_poly,
truth = lethal_nonlethal,
estimate = predicao_rf) %>%
autoplot(type = "heatmap") +
ggtitle("Levedura - SVM polinomial")
ggsave("fig/cm_yeast_svm_poly.png", height = 3, width = 3, dpi = 300)
#### SVM RADIAL ####
# Ver desempenho ----
yeast_svm_rbf_fit_tune %>%
collect_metrics() %>%
mutate(rbf_sigma = factor(rbf_sigma)) %>%
ggplot(., aes(x = cost, y = mean, colour = rbf_sigma)) +
geom_line() +
geom_point() +
facet_grid(~ .metric) +
scale_x_continuous(trans = "log2") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
scale_colour_viridis_d() +
ggtitle("Levedura - SVM radial")
ggsave("fig/cv_yeast_svm_rbf.png", height = 5, width = 7, dpi = 300)
# Selecionar melhor modelo ----
yeast_svm_rbf_best <- yeast_svm_rbf_fit_tune %>%
select_best("accuracy")
yeast_svm_rbf_final <-
yeast_svm_rbf_tune_wflow %>%
finalize_workflow(yeast_svm_rbf_best)
yeast_svm_rbf_final <- fit(yeast_svm_rbf_final, yeast_treino_t)
yeast_resultado_svm_rbf <-
yeast_teste_t %>%
bind_cols(predict(yeast_svm_rbf_final, yeast_teste_t) %>%
rename(predicao_rf = .pred_class))
metrics(yeast_resultado_svm_rbf,
truth = lethal_nonlethal,
estimate = predicao_rf,
options = "roc")
conf_mat(yeast_resultado_svm_rbf,
truth = lethal_nonlethal,
estimate = predicao_rf) %>%
autoplot(type = "heatmap") +
ggtitle("Levedura - SVM polinomial")
ggsave("fig/cm_yeast_svm_rbf.png", height = 3, width = 3, dpi = 300)
# Salvar todos os resultados
save(list = ls()[grep("yeast", ls())], file = "yeast_results.rda")
# Avaliação dos modelos ----
#### RANDOM FOREST ####
# Ver desempenho -----
mouse_rf_fit_tune %>%
collect_metrics() %>%
mutate(min_n = factor(min_n)) %>%
ggplot(., aes(x = mtry, y = mean, colour = min_n, group = min_n)) +
geom_line() +
geom_point() +
facet_grid(~ .metric) +
scale_x_continuous(breaks = seq(1, 9, 2)) +
scale_colour_viridis_d() +
ggtitle("Camundongo - Random Forest")
ggsave("fig/cv_mouse_rf.png", height = 5, width = 7, dpi = 300)
# Selecionar melhor modelo ----
mouse_rf_best <- mouse_rf_fit_tune %>%
select_best("accuracy")
mouse_rf_final <-
mouse_rf_tune_wflow %>%
finalize_workflow(mouse_rf_best)
mouse_rf_final <- fit(mouse_rf_final, mouse_treino_t)
mouse_resultado_rf <-
mouse_teste_t %>%
bind_cols(predict(mouse_rf_final, mouse_teste_t) %>%
rename(predicao_rf = .pred_class))
metrics(mouse_resultado_rf,
truth = lethal_nonlethal,
estimate = predicao_rf,
options = "roc")
conf_mat(mouse_resultado_rf,
truth = lethal_nonlethal,
estimate = predicao_rf) %>%
autoplot(type = "heatmap") +
ggtitle("Camundongo - Random Forest")
ggsave("fig/cm_mouse_rf.png", height = 5, width = 5, dpi = 300)
# Importância das variáveis ----
mouse_rf_final %>%
pull_workflow_fit() %>%
vip(scale = TRUE) +
ggtitle("Camundongo - Random Forest")
ggsave("fig/rf_importance_mouse.png", height = 5, width = 7, dpi = 300)
#### SVM POLINOMIAL ####
# Ver desempenho ----
mouse_svm_poly_fit_tune %>%
collect_metrics() %>%
mutate(degree = factor(degree)) %>%
ggplot(., aes(x = cost, y = mean, colour = degree)) +
geom_line() +
geom_point() +
facet_grid(~ .metric) +
scale_x_continuous(trans = "log2") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
scale_colour_viridis_d() +
ggtitle("Camundongo - SVM polinomial")
ggsave("fig/cv_mouse_svm_poly.png", height = 5, width = 7, dpi = 300)
# Selecionar melhor modelo ----
mouse_svm_poly_best <- mouse_svm_poly_fit_tune %>%
select_best("accuracy")
mouse_svm_poly_final <-
mouse_svm_poly_tune_wflow %>%
finalize_workflow(mouse_svm_poly_best)
mouse_svm_poly_final <- fit(mouse_svm_poly_final, mouse_treino_t)
mouse_resultado_svm_poly <-
mouse_teste_t %>%
bind_cols(predict(mouse_svm_poly_final, mouse_teste_t) %>%
rename(predicao_rf = .pred_class))
metrics(mouse_resultado_svm_poly,
truth = lethal_nonlethal,
estimate = predicao_rf,
options = "roc")
conf_mat(mouse_resultado_svm_poly,
truth = lethal_nonlethal,
estimate = predicao_rf) %>%
autoplot(type = "heatmap") +
ggtitle("Camundongo - SVM polinomial")
ggsave("fig/cm_mouse_svm_poly.png", height = 5, width = 5, dpi = 300)
#### SVM RADIAL ####
# Ver desempenho ----
mouse_svm_rbf_fit_tune %>%
collect_metrics() %>%
mutate(rbf_sigma = factor(rbf_sigma)) %>%
ggplot(., aes(x = cost, y = mean, colour = rbf_sigma)) +
geom_line() +
geom_point() +
facet_grid(~ .metric) +
scale_x_continuous(trans = "log2") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
scale_colour_viridis_d() +
ggtitle("Camundongo - SVM radial")
ggsave("fig/cv_mouse_svm_rbf.png", height = 5, width = 7, dpi = 300)
# Selecionar melhor modelo ----
mouse_svm_rbf_best <- mouse_svm_rbf_fit_tune %>%
select_best("accuracy")
mouse_svm_rbf_final <-
mouse_svm_rbf_tune_wflow %>%
finalize_workflow(mouse_svm_rbf_best)
mouse_svm_rbf_final <- fit(mouse_svm_rbf_final, mouse_treino_t)
mouse_resultado_svm_rbf <-
mouse_teste_t %>%
bind_cols(predict(mouse_svm_rbf_final, mouse_teste_t) %>%
rename(predicao_rf = .pred_class))
metrics(mouse_resultado_svm_rbf,
truth = lethal_nonlethal,
estimate = predicao_rf,
options = "roc")
conf_mat(mouse_resultado_svm_rbf,
truth = lethal_nonlethal,
estimate = predicao_rf) %>%
autoplot(type = "heatmap") +
ggtitle("Camundongo - SVM radial")
ggsave("fig/cm_mouse_svm_rbf.png", height = 5, width = 5, dpi = 300)
# Salvar todos os resultados
save(list = ls()[grep("mouse", ls())], file = "mouse_results.rda")
# Avaliação dos modelos ----
#### RANDOM FOREST ####
# Ver desempenho ----
yeast_rf_fit_tune %>%
collect_metrics() %>%
mutate(min_n = factor(min_n)) %>%
ggplot(., aes(x = mtry, y = mean, colour = min_n, group = min_n)) +
geom_line() +
geom_point() +
facet_grid(~ .metric) +
scale_x_continuous(breaks = seq(1, 9, 2)) +
scale_colour_viridis_d() +
ggtitle("Levedura - Random Forest")
ggsave("fig/cv_yeast_rf.png", height = 5, width = 7, dpi = 300)
# Selecionar melhor modelo ----
yeast_rf_best <- yeast_rf_fit_tune %>%
select_best("accuracy")
yeast_rf_final <-
yeast_rf_tune_wflow %>%
finalize_workflow(yeast_rf_best)
yeast_rf_final <- fit(yeast_rf_final,
yeast_treino_t)
yeast_resultado_rf <-
yeast_teste_t %>%
bind_cols(predict(yeast_rf_final, yeast_teste_t) %>%
rename(predicao_rf = .pred_class))
metrics(yeast_resultado_rf,
truth = lethal_nonlethal,
estimate = predicao_rf,
options = "roc")
conf_mat(yeast_resultado_rf,
truth = lethal_nonlethal,
estimate = predicao_rf) %>%
autoplot(type = "heatmap") +
ggtitle("Levedura - Random Forest")
ggsave("fig/cm_yeast_rf.png", height = 5, width = 5, dpi = 300)
# Importância das variáveis ----
yeast_rf_final %>%
pull_workflow_fit() %>%
vip(scale = TRUE) +
ggtitle("Levedura - Random Forest")
ggsave("fig/rf_importance_yeast.png", height = 5, width = 7, dpi = 300)
#### SVM POLINOMIAL ####
# Ver desempenho ----
yeast_svm_poly_fit_tune %>%
collect_metrics() %>%
mutate(degree = factor(degree)) %>%
ggplot(., aes(x = cost, y = mean, colour = degree)) +
geom_line() +
geom_point() +
facet_grid(~ .metric) +
scale_x_continuous(trans = "log2") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
scale_colour_viridis_d() +
ggtitle("Levedura - SVM polinomial")
ggsave("fig/cv_yeast_svm_poly.png", height = 5, width = 7, dpi = 300)
# Selecionar melhor modelo ----
yeast_svm_poly_best <- yeast_svm_poly_fit_tune %>%
select_best("accuracy")
yeast_svm_poly_final <-
yeast_svm_poly_tune_wflow %>%
finalize_workflow(yeast_svm_poly_best)
yeast_svm_poly_final <- fit(yeast_svm_poly_final, yeast_treino_t)
yeast_resultado_svm_poly <-
yeast_teste_t %>%
bind_cols(predict(yeast_svm_poly_final, yeast_teste_t) %>%
rename(predicao_rf = .pred_class))
metrics(yeast_resultado_svm_poly,
truth = lethal_nonlethal,
estimate = predicao_rf,
options = "roc")
conf_mat(yeast_resultado_svm_poly,
truth = lethal_nonlethal,
estimate = predicao_rf) %>%
autoplot(type = "heatmap") +
ggtitle("Levedura - SVM polinomial")
ggsave("fig/cm_yeast_svm_poly.png", height = 5, width = 5, dpi = 300)
#### SVM RADIAL ####
# Ver desempenho ----
yeast_svm_rbf_fit_tune %>%
collect_metrics() %>%
mutate(rbf_sigma = factor(rbf_sigma)) %>%
ggplot(., aes(x = cost, y = mean, colour = rbf_sigma)) +
geom_line() +
geom_point() +
facet_grid(~ .metric) +
scale_x_continuous(trans = "log2") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
scale_colour_viridis_d() +
ggtitle("Levedura - SVM radial")
ggsave("fig/cv_yeast_svm_rbf.png", height = 5, width = 7, dpi = 300)
# Selecionar melhor modelo ----
yeast_svm_rbf_best <- yeast_svm_rbf_fit_tune %>%
select_best("accuracy")
yeast_svm_rbf_final <-
yeast_svm_rbf_tune_wflow %>%
finalize_workflow(yeast_svm_rbf_best)
yeast_svm_rbf_final <- fit(yeast_svm_rbf_final, yeast_treino_t)
yeast_resultado_svm_rbf <-
yeast_teste_t %>%
bind_cols(predict(yeast_svm_rbf_final, yeast_teste_t) %>%
rename(predicao_rf = .pred_class))
metrics(yeast_resultado_svm_rbf,
truth = lethal_nonlethal,
estimate = predicao_rf,
options = "roc")
conf_mat(yeast_resultado_svm_rbf,
truth = lethal_nonlethal,
estimate = predicao_rf) %>%
autoplot(type = "heatmap") +
ggtitle("Levedura - SVM polinomial")
ggsave("fig/cm_yeast_svm_rbf.png", height = 5, width = 5, dpi = 300)
# Salvar todos os resultados
save(list = ls()[grep("yeast", ls())], file = "yeast_results.rda")
